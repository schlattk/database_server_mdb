'use strict';

exports.__esModule = true;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mime = require('mime');

var _mime2 = _interopRequireDefault(_mime);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _promisify = require('../utils/promisify');

var _promisify2 = _interopRequireDefault(_promisify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const readFile = (0, _promisify2.default)(_fs2.default.readFile);
const stat = (0, _promisify2.default)(_fs2.default.stat);
const writeFile = (0, _promisify2.default)(_fs2.default.writeFile);

class UploadStorage {
    constructor(uploadsRoot) {
        this.uploadsRoot = uploadsRoot;
    }

    static _loadFile(filePath) {
        return _asyncToGenerator(function* () {
            const fileContent = yield readFile(filePath);
            const stats = yield stat(filePath);

            return {
                data: fileContent.toString('base64'),
                info: {
                    lastModifiedDate: stats.mtime,
                    name: _path2.default.basename(filePath),
                    type: _mime2.default.lookup(filePath)
                }
            };
        })();
    }

    _runFileProcessingTask(fileName, processor) {
        var _this = this;

        return _asyncToGenerator(function* () {
            const resolvedPath = _path2.default.resolve(_this.uploadsRoot, fileName);

            try {
                return yield processor(resolvedPath, fileName);
            } catch (e) {
                return {
                    err: e.toString(),
                    path: resolvedPath,
                    file: fileName
                };
            }
        })();
    }

    _processFiles(fileNames, processor) {
        var _this2 = this;

        return _asyncToGenerator(function* () {
            const processTasks = fileNames.map(function (fileName) {
                return _this2._runFileProcessingTask(fileName, processor);
            });
            let result = yield Promise.all(processTasks);

            result = result.filter(function (value) {
                return !!value;
            });

            return result.length ? result : null;
        })();
    }

    store(fileNames, data) {
        var _this3 = this;

        return _asyncToGenerator(function* () {
            return yield _this3._processFiles(fileNames, (() => {
                var _ref = _asyncToGenerator(function* (resolvedPath, fileName) {
                    const content = Buffer.from(data[fileNames.indexOf(fileName)], 'base64');

                    yield writeFile(resolvedPath, content, { flag: 'wx' });

                    return {
                        path: resolvedPath,
                        file: fileName
                    };
                });

                return function (_x, _x2) {
                    return _ref.apply(this, arguments);
                };
            })());
        })();
    }

    get(paths) {
        var _this4 = this;

        return _asyncToGenerator(function* () {
            return yield _this4._processFiles(paths, (() => {
                var _ref2 = _asyncToGenerator(function* (resolvedPath) {
                    return yield UploadStorage._loadFile(resolvedPath);
                });

                return function (_x3) {
                    return _ref2.apply(this, arguments);
                };
            })());
        })();
    }
}
exports.default = UploadStorage;
module.exports = exports['default'];