'use strict';

exports.__esModule = true;

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _lodash = require('lodash');

var _stripBom = require('strip-bom');

var _stripBom2 = _interopRequireDefault(_stripBom);

var _testcafeLegacyApi = require('testcafe-legacy-api');

var _testcafeHammerhead = require('testcafe-hammerhead');

var _testcafeHammerhead2 = _interopRequireDefault(_testcafeHammerhead);

var _compiler = require('./test-file/formats/es-next/compiler');

var _compiler2 = _interopRequireDefault(_compiler);

var _compiler3 = require('./test-file/formats/typescript/compiler');

var _compiler4 = _interopRequireDefault(_compiler3);

var _compiler5 = require('./test-file/formats/coffeescript/compiler');

var _compiler6 = _interopRequireDefault(_compiler5);

var _raw = require('./test-file/formats/raw');

var _raw2 = _interopRequireDefault(_raw);

var _promisifiedFunctions = require('../utils/promisified-functions');

var _runtime = require('../errors/runtime');

var _message = require('../errors/runtime/message');

var _message2 = _interopRequireDefault(_message);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SOURCE_CHUNK_LENGTH = 1000;

const testFileCompilers = [new _testcafeLegacyApi.Compiler(_testcafeHammerhead2.default.processScript), new _compiler2.default(), new _compiler4.default(), new _compiler6.default(), new _raw2.default()];

class Compiler {
    constructor(sources) {
        this.sources = sources;
    }

    static getSupportedTestFileExtensions() {
        return (0, _lodash.uniq)(testFileCompilers.map(c => c.getSupportedExtension()));
    }

    _compileTestFile(filename) {
        return (0, _asyncToGenerator3.default)(function* () {
            let code = null;

            try {
                code = yield (0, _promisifiedFunctions.readFile)(filename);
            } catch (err) {
                throw new _runtime.GeneralError(_message2.default.cantFindSpecifiedTestSource, filename);
            }

            code = (0, _stripBom2.default)(code).toString();

            const compiler = (0, _lodash.find)(testFileCompilers, function (c) {
                return c.canCompile(code, filename);
            });

            return compiler ? yield compiler.compile(code, filename) : null;
        })();
    }

    getTests() {
        var _this = this;

        return (0, _asyncToGenerator3.default)(function* () {
            const sourceChunks = (0, _lodash.chunk)(_this.sources, SOURCE_CHUNK_LENGTH);
            let tests = [];
            let compileUnits = [];

            // NOTE: split sources into chunks because the fs module can't read all files
            // simultaneously if the number of them is too large (several thousands).
            while (sourceChunks.length) {
                compileUnits = sourceChunks.shift().map(function (filename) {
                    return _this._compileTestFile(filename);
                });
                tests = tests.concat((yield _pinkie2.default.all(compileUnits)));
            }

            testFileCompilers.forEach(function (c) {
                return c.cleanUp();
            });

            tests = (0, _lodash.flattenDeep)(tests).filter(function (test) {
                return !!test;
            });

            return tests;
        })();
    }
}
exports.default = Compiler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21waWxlci9pbmRleC5qcyJdLCJuYW1lcyI6WyJTT1VSQ0VfQ0hVTktfTEVOR1RIIiwidGVzdEZpbGVDb21waWxlcnMiLCJMZWdhY3lUZXN0RmlsZUNvbXBpbGVyIiwiaGFtbWVyaGVhZCIsInByb2Nlc3NTY3JpcHQiLCJFc05leHRUZXN0RmlsZUNvbXBpbGVyIiwiVHlwZVNjcmlwdFRlc3RGaWxlQ29tcGlsZXIiLCJDb2ZmZWVTY3JpcHRUZXN0RmlsZUNvbXBpbGVyIiwiUmF3VGVzdEZpbGVDb21waWxlciIsIkNvbXBpbGVyIiwiY29uc3RydWN0b3IiLCJzb3VyY2VzIiwiZ2V0U3VwcG9ydGVkVGVzdEZpbGVFeHRlbnNpb25zIiwibWFwIiwiYyIsImdldFN1cHBvcnRlZEV4dGVuc2lvbiIsIl9jb21waWxlVGVzdEZpbGUiLCJmaWxlbmFtZSIsImNvZGUiLCJlcnIiLCJHZW5lcmFsRXJyb3IiLCJNRVNTQUdFIiwiY2FudEZpbmRTcGVjaWZpZWRUZXN0U291cmNlIiwidG9TdHJpbmciLCJjb21waWxlciIsImNhbkNvbXBpbGUiLCJjb21waWxlIiwiZ2V0VGVzdHMiLCJzb3VyY2VDaHVua3MiLCJ0ZXN0cyIsImNvbXBpbGVVbml0cyIsImxlbmd0aCIsInNoaWZ0IiwiY29uY2F0IiwiUHJvbWlzZSIsImFsbCIsImZvckVhY2giLCJjbGVhblVwIiwiZmlsdGVyIiwidGVzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7Ozs7QUFHQSxNQUFNQSxzQkFBc0IsSUFBNUI7O0FBRUEsTUFBTUMsb0JBQW9CLENBQ3RCLElBQUlDLDJCQUFKLENBQTJCQyw2QkFBV0MsYUFBdEMsQ0FEc0IsRUFFdEIsSUFBSUMsa0JBQUosRUFGc0IsRUFHdEIsSUFBSUMsa0JBQUosRUFIc0IsRUFJdEIsSUFBSUMsa0JBQUosRUFKc0IsRUFLdEIsSUFBSUMsYUFBSixFQUxzQixDQUExQjs7QUFRZSxNQUFNQyxRQUFOLENBQWU7QUFDMUJDLGdCQUFhQyxPQUFiLEVBQXNCO0FBQ2xCLGFBQUtBLE9BQUwsR0FBZUEsT0FBZjtBQUNIOztBQUVELFdBQU9DLDhCQUFQLEdBQXlDO0FBQ3JDLGVBQU8sa0JBQUtYLGtCQUFrQlksR0FBbEIsQ0FBc0JDLEtBQUtBLEVBQUVDLHFCQUFGLEVBQTNCLENBQUwsQ0FBUDtBQUNIOztBQUVLQyxvQkFBTixDQUF3QkMsUUFBeEIsRUFBa0M7QUFBQTtBQUM5QixnQkFBSUMsT0FBTyxJQUFYOztBQUVBLGdCQUFJO0FBQ0FBLHVCQUFPLE1BQU0sb0NBQVNELFFBQVQsQ0FBYjtBQUNILGFBRkQsQ0FHQSxPQUFPRSxHQUFQLEVBQVk7QUFDUixzQkFBTSxJQUFJQyxxQkFBSixDQUFpQkMsa0JBQVFDLDJCQUF6QixFQUFzREwsUUFBdEQsQ0FBTjtBQUNIOztBQUVEQyxtQkFBTyx3QkFBU0EsSUFBVCxFQUFlSyxRQUFmLEVBQVA7O0FBRUEsa0JBQU1DLFdBQVcsa0JBQUt2QixpQkFBTCxFQUF3QjtBQUFBLHVCQUFLYSxFQUFFVyxVQUFGLENBQWFQLElBQWIsRUFBbUJELFFBQW5CLENBQUw7QUFBQSxhQUF4QixDQUFqQjs7QUFFQSxtQkFBT08sV0FBVyxNQUFNQSxTQUFTRSxPQUFULENBQWlCUixJQUFqQixFQUF1QkQsUUFBdkIsQ0FBakIsR0FBb0QsSUFBM0Q7QUFkOEI7QUFlakM7O0FBRUtVLFlBQU4sR0FBa0I7QUFBQTs7QUFBQTtBQUNkLGtCQUFNQyxlQUFlLG1CQUFNLE1BQUtqQixPQUFYLEVBQW9CWCxtQkFBcEIsQ0FBckI7QUFDQSxnQkFBSTZCLFFBQWUsRUFBbkI7QUFDQSxnQkFBSUMsZUFBZSxFQUFuQjs7QUFFQTtBQUNBO0FBQ0EsbUJBQU9GLGFBQWFHLE1BQXBCLEVBQTRCO0FBQ3hCRCwrQkFBZUYsYUFBYUksS0FBYixHQUFxQm5CLEdBQXJCLENBQXlCO0FBQUEsMkJBQVksTUFBS0csZ0JBQUwsQ0FBc0JDLFFBQXRCLENBQVo7QUFBQSxpQkFBekIsQ0FBZjtBQUNBWSx3QkFBZUEsTUFBTUksTUFBTixFQUFhLE1BQU1DLGlCQUFRQyxHQUFSLENBQVlMLFlBQVosQ0FBbkIsRUFBZjtBQUNIOztBQUVEN0IsOEJBQWtCbUMsT0FBbEIsQ0FBMEI7QUFBQSx1QkFBS3RCLEVBQUV1QixPQUFGLEVBQUw7QUFBQSxhQUExQjs7QUFFQVIsb0JBQVEseUJBQVFBLEtBQVIsRUFBZVMsTUFBZixDQUFzQjtBQUFBLHVCQUFRLENBQUMsQ0FBQ0MsSUFBVjtBQUFBLGFBQXRCLENBQVI7O0FBRUEsbUJBQU9WLEtBQVA7QUFoQmM7QUFpQmpCO0FBM0N5QjtrQkFBVHBCLFEiLCJmaWxlIjoiY29tcGlsZXIvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvbWlzZSBmcm9tICdwaW5raWUnO1xuaW1wb3J0IHsgZmxhdHRlbkRlZXAgYXMgZmxhdHRlbiwgZmluZCwgY2h1bmssIHVuaXEgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHN0cmlwQm9tIGZyb20gJ3N0cmlwLWJvbSc7XG5pbXBvcnQgeyBDb21waWxlciBhcyBMZWdhY3lUZXN0RmlsZUNvbXBpbGVyIH0gZnJvbSAndGVzdGNhZmUtbGVnYWN5LWFwaSc7XG5pbXBvcnQgaGFtbWVyaGVhZCBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCBFc05leHRUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4vdGVzdC1maWxlL2Zvcm1hdHMvZXMtbmV4dC9jb21waWxlcic7XG5pbXBvcnQgVHlwZVNjcmlwdFRlc3RGaWxlQ29tcGlsZXIgZnJvbSAnLi90ZXN0LWZpbGUvZm9ybWF0cy90eXBlc2NyaXB0L2NvbXBpbGVyJztcbmltcG9ydCBDb2ZmZWVTY3JpcHRUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4vdGVzdC1maWxlL2Zvcm1hdHMvY29mZmVlc2NyaXB0L2NvbXBpbGVyJztcbmltcG9ydCBSYXdUZXN0RmlsZUNvbXBpbGVyIGZyb20gJy4vdGVzdC1maWxlL2Zvcm1hdHMvcmF3JztcbmltcG9ydCB7IHJlYWRGaWxlIH0gZnJvbSAnLi4vdXRpbHMvcHJvbWlzaWZpZWQtZnVuY3Rpb25zJztcbmltcG9ydCB7IEdlbmVyYWxFcnJvciB9IGZyb20gJy4uL2Vycm9ycy9ydW50aW1lJztcbmltcG9ydCBNRVNTQUdFIGZyb20gJy4uL2Vycm9ycy9ydW50aW1lL21lc3NhZ2UnO1xuXG5cbmNvbnN0IFNPVVJDRV9DSFVOS19MRU5HVEggPSAxMDAwO1xuXG5jb25zdCB0ZXN0RmlsZUNvbXBpbGVycyA9IFtcbiAgICBuZXcgTGVnYWN5VGVzdEZpbGVDb21waWxlcihoYW1tZXJoZWFkLnByb2Nlc3NTY3JpcHQpLFxuICAgIG5ldyBFc05leHRUZXN0RmlsZUNvbXBpbGVyKCksXG4gICAgbmV3IFR5cGVTY3JpcHRUZXN0RmlsZUNvbXBpbGVyKCksXG4gICAgbmV3IENvZmZlZVNjcmlwdFRlc3RGaWxlQ29tcGlsZXIoKSxcbiAgICBuZXcgUmF3VGVzdEZpbGVDb21waWxlcigpXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21waWxlciB7XG4gICAgY29uc3RydWN0b3IgKHNvdXJjZXMpIHtcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gc291cmNlcztcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0U3VwcG9ydGVkVGVzdEZpbGVFeHRlbnNpb25zICgpIHtcbiAgICAgICAgcmV0dXJuIHVuaXEodGVzdEZpbGVDb21waWxlcnMubWFwKGMgPT4gYy5nZXRTdXBwb3J0ZWRFeHRlbnNpb24oKSkpO1xuICAgIH1cblxuICAgIGFzeW5jIF9jb21waWxlVGVzdEZpbGUgKGZpbGVuYW1lKSB7XG4gICAgICAgIGxldCBjb2RlID0gbnVsbDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29kZSA9IGF3YWl0IHJlYWRGaWxlKGZpbGVuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgR2VuZXJhbEVycm9yKE1FU1NBR0UuY2FudEZpbmRTcGVjaWZpZWRUZXN0U291cmNlLCBmaWxlbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb2RlID0gc3RyaXBCb20oY29kZSkudG9TdHJpbmcoKTtcblxuICAgICAgICBjb25zdCBjb21waWxlciA9IGZpbmQodGVzdEZpbGVDb21waWxlcnMsIGMgPT4gYy5jYW5Db21waWxlKGNvZGUsIGZpbGVuYW1lKSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBpbGVyID8gYXdhaXQgY29tcGlsZXIuY29tcGlsZShjb2RlLCBmaWxlbmFtZSkgOiBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIGdldFRlc3RzICgpIHtcbiAgICAgICAgY29uc3Qgc291cmNlQ2h1bmtzID0gY2h1bmsodGhpcy5zb3VyY2VzLCBTT1VSQ0VfQ0hVTktfTEVOR1RIKTtcbiAgICAgICAgbGV0IHRlc3RzICAgICAgICA9IFtdO1xuICAgICAgICBsZXQgY29tcGlsZVVuaXRzID0gW107XG5cbiAgICAgICAgLy8gTk9URTogc3BsaXQgc291cmNlcyBpbnRvIGNodW5rcyBiZWNhdXNlIHRoZSBmcyBtb2R1bGUgY2FuJ3QgcmVhZCBhbGwgZmlsZXNcbiAgICAgICAgLy8gc2ltdWx0YW5lb3VzbHkgaWYgdGhlIG51bWJlciBvZiB0aGVtIGlzIHRvbyBsYXJnZSAoc2V2ZXJhbCB0aG91c2FuZHMpLlxuICAgICAgICB3aGlsZSAoc291cmNlQ2h1bmtzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29tcGlsZVVuaXRzID0gc291cmNlQ2h1bmtzLnNoaWZ0KCkubWFwKGZpbGVuYW1lID0+IHRoaXMuX2NvbXBpbGVUZXN0RmlsZShmaWxlbmFtZSkpO1xuICAgICAgICAgICAgdGVzdHMgICAgICAgID0gdGVzdHMuY29uY2F0KGF3YWl0IFByb21pc2UuYWxsKGNvbXBpbGVVbml0cykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGVzdEZpbGVDb21waWxlcnMuZm9yRWFjaChjID0+IGMuY2xlYW5VcCgpKTtcblxuICAgICAgICB0ZXN0cyA9IGZsYXR0ZW4odGVzdHMpLmZpbHRlcih0ZXN0ID0+ICEhdGVzdCk7XG5cbiAgICAgICAgcmV0dXJuIHRlc3RzO1xuICAgIH1cbn1cbiJdfQ==
