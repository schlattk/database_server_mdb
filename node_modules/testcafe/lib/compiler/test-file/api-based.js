'use strict';

exports.__esModule = true;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _create = require('babel-runtime/core-js/object/create');

var _create2 = _interopRequireDefault(_create);

var _path = require('path');

var _fs = require('fs');

var _stripBom = require('strip-bom');

var _stripBom2 = _interopRequireDefault(_stripBom);

var _base = require('./base');

var _base2 = _interopRequireDefault(_base);

var _testFile = require('../../api/structure/test-file');

var _testFile2 = _interopRequireDefault(_testFile);

var _fixture = require('../../api/structure/fixture');

var _fixture2 = _interopRequireDefault(_fixture);

var _test = require('../../api/structure/test');

var _test2 = _interopRequireDefault(_test);

var _runtime = require('../../errors/runtime');

var _stackCleaningHook = require('../../errors/stack-cleaning-hook');

var _stackCleaningHook2 = _interopRequireDefault(_stackCleaningHook);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CWD = process.cwd();

const EXPORTABLE_LIB_PATH = (0, _path.join)(__dirname, '../../api/exportable-lib');

const FIXTURE_RE = /(^|;|\s+)fixture\s*(\.|\(|`)/;
const TEST_RE = /(^|;|\s+)test\s*(\.|\()/;

const Module = module.constructor;

class APIBasedTestFileCompilerBase extends _base2.default {
    constructor() {
        super();

        this.cache = (0, _create2.default)(null);
        this.origRequireExtensions = (0, _create2.default)(null);
    }

    static get EXPORTABLE_LIB_PATH() {
        return EXPORTABLE_LIB_PATH;
    }

    static _getNodeModulesLookupPath(filename) {
        const dir = (0, _path.dirname)(filename);

        return Module._nodeModulePaths(dir);
    }

    static _isNodeModulesDep(filename) {
        return (0, _path.relative)(CWD, filename).split(_path.sep).indexOf('node_modules') >= 0;
    }

    static _execAsModule(code, filename) {
        const mod = new Module(filename, module.parent);

        mod.filename = filename;
        mod.paths = APIBasedTestFileCompilerBase._getNodeModulesLookupPath(filename);

        mod._compile(code, filename);
    }

    _compileCode() /* code, filename */{
        throw new Error('Not implemented');
    }

    _getRequireCompilers() {
        throw new Error('Not implemented');
    }

    _setupRequireHook(testFile) {
        const requireCompilers = this._getRequireCompilers();

        this.origRequireExtensions = (0, _create2.default)(null);

        (0, _keys2.default)(requireCompilers).forEach(ext => {
            const origExt = require.extensions[ext];

            this.origRequireExtensions[ext] = origExt;

            require.extensions[ext] = (mod, filename) => {
                // NOTE: remove global API so that it will be unavailable for the dependencies
                this._removeGlobalAPI();

                if (APIBasedTestFileCompilerBase._isNodeModulesDep(filename)) origExt(mod, filename);else {
                    const code = (0, _fs.readFileSync)(filename).toString();
                    const compiledCode = requireCompilers[ext]((0, _stripBom2.default)(code), filename);

                    mod.paths = APIBasedTestFileCompilerBase._getNodeModulesLookupPath(filename);

                    mod._compile(compiledCode, filename);
                }

                this._addGlobalAPI(testFile);
            };
        });
    }

    _removeRequireHook() {
        (0, _keys2.default)(this.origRequireExtensions).forEach(ext => {
            require.extensions[ext] = this.origRequireExtensions[ext];
        });
    }

    _compileCodeForTestFile(code, filename) {
        let compiledCode = null;

        _stackCleaningHook2.default.enabled = true;

        try {
            compiledCode = this._compileCode(code, filename);
        } catch (err) {
            throw new _runtime.TestCompilationError(_stackCleaningHook2.default.cleanError(err));
        } finally {
            _stackCleaningHook2.default.enabled = false;
        }

        return compiledCode;
    }

    _addGlobalAPI(testFile) {
        Object.defineProperty(global, 'fixture', {
            get: () => new _fixture2.default(testFile),
            configurable: true
        });

        Object.defineProperty(global, 'test', {
            get: () => new _test2.default(testFile),
            configurable: true
        });
    }

    _removeGlobalAPI() {
        delete global.fixture;
        delete global.test;
    }

    compile(code, filename) {
        const compiledCode = this._compileCodeForTestFile(code, filename);
        const testFile = new _testFile2.default(filename);

        this._addGlobalAPI(testFile);

        _stackCleaningHook2.default.enabled = true;

        this._setupRequireHook(testFile);

        try {
            APIBasedTestFileCompilerBase._execAsModule(compiledCode, filename);
        } catch (err) {
            // HACK: workaround for the `instanceof` problem
            // (see: http://stackoverflow.com/questions/33870684/why-doesnt-instanceof-work-on-instances-of-error-subclasses-under-babel-node)
            if (err.constructor !== _runtime.APIError) throw new _runtime.TestCompilationError(_stackCleaningHook2.default.cleanError(err));

            throw err;
        } finally {
            this._removeRequireHook();
            _stackCleaningHook2.default.enabled = false;

            this._removeGlobalAPI();
        }

        return testFile.getTests();
    }

    _hasTests(code) {
        return FIXTURE_RE.test(code) && TEST_RE.test(code);
    }

    cleanUp() {
        this.cache = {};
    }
}
exports.default = APIBasedTestFileCompilerBase;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf8;base64,
